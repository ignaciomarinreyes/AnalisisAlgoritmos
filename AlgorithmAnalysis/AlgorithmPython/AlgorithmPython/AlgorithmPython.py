import time
import argparse
import os
import sys

# Read files from the folder and handles exceptions
def readFile(matrix):
    parentFile = args.folder + "/fichVect"
    try:
        files = os.listdir(args.folder)
        Nfiles = len(files)
        if Nfiles == 0: sys.exit("Directory doesn't contain vectors, for help use the -h option")
    except Exception as e:
        print(e)
        sys.exit("Directory Not Found, for help use the -h option")
    for i in range (1, Nfiles + 1):
        list = []
        file = parentFile + str(i) + ".txt"
        try:
            f = open(file, 'r')
            N = f.readline()
            N = int(N)
            for j in range (N):
                element = f.readline()
                list.append(float(element))
            matrix.append(list)
        except Exception as e:
            print(e)
            sys.exit("Vectors are not named or ordered in the correct way, for help use the -h option")
        finally:
            f.close()

# Prints input matrix
def printInput(matrix):
    print('\n'.join(['\t'.join([str(cell) for cell in row]) for row in matrix]))

# Calculates Gauss-Jordan
def PerformOperation(matrix, n):
    flag = 0
    for i in range (n):
        if (matrix[i][i] == 0):
            c = 1
            while (matrix[i+c][i] == 0 and (i+c) < n): 
                c += 1
            if ((i+c) == n):
                flag = 1
                break
            for k in range (n+1):                
                temp = matrix[i][k]
                matrix[i][k] = matrix[i+c][k]
                matrix[i+c][k] = temp
                print(k);
                print("N =", n);
            j=0
        for j in range (n):
            if (i != j):
                p = matrix[j][i] / matrix[i][i]
                for k in range (n+1):
                    matrix[j][k] = matrix[j][k] - (matrix[i][k]*p)
    return flag

# Checks for infinite, existing solutions or none solutions in Gauss
def checkConsistency(matrix, n, flag):
    i, j, sum
    flag = 3
    for i in range (n):
        sum = 0
        for j in (n): sum = sum + matrix[i][j]
        if (sum == matrix[i][j]): flag = 2
    return flag

# Adds all the vectors of the matrix (-a option)
def add(matrix): 
    Nrows = len(matrix)
    Ncolumns = len(matrix[0])
    sum = [0 for i in range(Ncolumns)]
    for i in range(Ncolumns):
        for j in range(Nrows):
            sum[i] += matrix[j][i]
    return sum

# Prints output Gauss matrix
def printResult(matrix, n, flag):
    if (flag == 2): print("Infinite Solutions Exists")
    if (flag == 3): print("No Solution Exists")
    else:
        for i in range (n):
            print(matrix[i][n] / matrix[i][i], end=' ')

# Prints output poly 
def printPoly(poly):
    n = len(poly)
    aux = n - 1
    for i in range(n): 
        print(poly[i], end = "") 
        if (i != n - 1): 
            print("x^", aux, " + ", end = "")
        aux -= 1

# Prints running time
def printTime(start, end, n):
    res = end - start
    print(f"For", n, "vectors -> Taken time:", res,"s")

if __name__ == '__main__':
    # Command line library implementation
    parser = argparse.ArgumentParser(description = 'The program calculates Gauss-Jordan Elimnation of a matrix. For the program to run correctly, there should exist a file in the project which should contain the set of vectors that form the matrix, generated by the FileGenerator. These vectors must be in order and named as follows: fichVect[:digit:].txt. There is an -a option in which the vectors are treated as polynomials and are summed. For further information, use the option -h')
    parser.add_argument('-di', '--input', action='store_true', help='Display input')
    parser.add_argument('-do', '--output', action='store_true', help='Display output')
    parser.add_argument('-dt', '--time', action='store_true', help='Display runtime of the program in seconds')
    parser.add_argument('-a', '--add', action='store_true', help='Add all polynomials')
    parser.add_argument('-f', '--folder', metavar='', type=str, required=True, help='Read vectors from a folder')
    args = parser.parse_args()

    # Reads and stores the matrix
    matrix = [[]]
    readFile(matrix)
    matrix.remove(matrix[0])

    start = 0
    end = 0
    
    # Control of options
    if args.input: printInput(matrix)
    # Option add is selected
    if args.add: 
        start = time.time()
        sum = add(matrix)
        end = time.time()
        if args.output: printPoly(sum)
    # Else, program runs Gauss-Jordan
    else:
        n = len(matrix)
        flag = 0
        start = time.time()
        flag = PerformOperation(matrix, n)
        end = time.time()
        if (flag == 1): flag = checkConsistency(matrix, n, flag)
        if args.output: printResult(matrix, n, flag)
    n = len(matrix)
    if args.time: printTime(start, end, n)
